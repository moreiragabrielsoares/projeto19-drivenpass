generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bankCards {
  id             Int      @id @default(autoincrement())
  userId         Int
  title          String
  number         String
  name           String
  securityCode   String
  expirationDate String
  isVirtual      Boolean
  type           cardType
  password       String
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  users          users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, title])
}

model loginCredentials {
  id           Int      @id @default(autoincrement())
  userId       Int
  title        String
  url          String
  userName     String
  userPassword String
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  users        users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, title])
}

model safeNotes {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  note      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, title])
}

model sessions {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now()) @db.Timestamptz(6)
  bankCards        bankCards[]
  loginCredentials loginCredentials[]
  safeNotes        safeNotes[]
  sessions         sessions[]
  wifiCredentials  wifiCredentials[]
}

model wifiCredentials {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  name      String
  password  String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum cardType {
  credit
  debit
  both
}
